package com.jaynewstrom.gastracker.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.jaynewstrom.gastracker.dao.Price;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRICE.
*/
public class PriceDao extends AbstractDao<Price, Long> {

    public static final String TABLENAME = "PRICE";

    /**
     * Properties of entity Price.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
        public final static Property CreatedAtDate = new Property(2, java.util.Date.class, "createdAtDate", false, "CREATED_AT_DATE");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, double.class, "latitude", false, "LATITUDE");
        public final static Property UploadStarted = new Property(5, boolean.class, "uploadStarted", false, "UPLOAD_STARTED");
        public final static Property UploadCompleted = new Property(6, boolean.class, "uploadCompleted", false, "UPLOAD_COMPLETED");
        public final static Property FuelGradeId = new Property(7, long.class, "fuelGradeId", false, "FUEL_GRADE_ID");
    };

    private DaoSession daoSession;


    public PriceDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRICE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'VALUE' TEXT NOT NULL ," + // 1: value
                "'CREATED_AT_DATE' INTEGER NOT NULL ," + // 2: createdAtDate
                "'LONGITUDE' REAL NOT NULL ," + // 3: longitude
                "'LATITUDE' REAL NOT NULL ," + // 4: latitude
                "'UPLOAD_STARTED' INTEGER NOT NULL ," + // 5: uploadStarted
                "'UPLOAD_COMPLETED' INTEGER NOT NULL ," + // 6: uploadCompleted
                "'FUEL_GRADE_ID' INTEGER NOT NULL );"); // 7: fuelGradeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getValue());
        stmt.bindLong(3, entity.getCreatedAtDate().getTime());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindLong(6, entity.getUploadStarted() ? 1l: 0l);
        stmt.bindLong(7, entity.getUploadCompleted() ? 1l: 0l);
        stmt.bindLong(8, entity.getFuelGradeId());
    }

    @Override
    protected void attachEntity(Price entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Price readEntity(Cursor cursor, int offset) {
        Price entity = new Price();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Price entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setValue(cursor.getString(offset + 1));
        entity.setCreatedAtDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setUploadStarted(cursor.getShort(offset + 5) != 0);
        entity.setUploadCompleted(cursor.getShort(offset + 6) != 0);
        entity.setFuelGradeId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Price entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Price entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPriceDao().getAllColumns());
            builder.append(" FROM PRICE T");
            builder.append(" LEFT JOIN PRICE T0 ON T.'FUEL_GRADE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Price loadCurrentDeep(Cursor cursor, boolean lock) {
        Price entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Price price = loadCurrentOther(daoSession.getPriceDao(), cursor, offset);
         if(price != null) {
            entity.setPrice(price);
        }

        return entity;    
    }

    public Price loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Price> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Price> list = new ArrayList<Price>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Price> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Price> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
